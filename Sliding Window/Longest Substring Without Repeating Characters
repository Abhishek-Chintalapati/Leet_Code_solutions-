class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        
        if not s:
            return 0
        
        final_list = []
        for i in range(len(s)):
            l, r = i, i
            list_str = []
            while r < len(s) and s[r] not in list_str:
                list_str.append(s[r])
                r += 1
            final_list.append(len(list_str))
        
        return max(final_list)

Optimized solution --

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        char_index = {}  # Dictionary to store the index of each character
        start = 0  # Start index of the current substring
        max_length = 0  # Maximum length of substring without repeating characters

        for end in range(len(s)):
            if s[end] in char_index and char_index[s[end]] >= start:
                # If the character is repeated, update the start index
                start = char_index[s[end]] + 1

            # Update the index of the current character
            char_index[s[end]] = end

            # Update the maximum length if needed
            max_length = max(max_length, end - start + 1)

        return max_length



        
